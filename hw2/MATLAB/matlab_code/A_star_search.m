function path = A_star_search(map,MAX_X,MAX_Y, label)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=2*(ones(MAX_X,MAX_Y));%地图的初始值为2
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset; %目标位置的x,y坐标，可是为什么要offset
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter%所有的障碍都被加入close list中
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xval;
    yNode=yval;
    OPEN_COUNT=1;%对open计数？
    goal_distance=distance(xNode,yNode,xTarget,yTarget,label);%计算距离？是一个已知的函数吗？不是
    path_cost=0;%路径权重
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance); %两个相同的距离，g==0, f==h
    OPEN(OPEN_COUNT,1)=0;
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    NoPath=1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
while ((xNode ~= xTarget || yNode ~= yTarget)&& NoPath == 1)
    exp_array = expand_array(xNode, yNode, path_cost, xTarget, yTarget, CLOSED, MAX_X, MAX_Y, label, xStart, yStart);
    exp_count = size(exp_array, 1);%统计了successor的个数
    
    for i = 1:exp_count
        flag = 0;
        for j = 1:OPEN_COUNT
            %如果扩展点已经在OPEN中，并且这个点的f比上一次得到的f要小，那么可以把这个点当作起始点，更新g，h, f的值
            if (exp_array(i,1) == OPEN(j,2) && exp_array(i,2) == OPEN(j,3)) 
                OPEN(j,8) = min(OPEN(j,8), exp_array(i,5));
                if (OPEN(j,8) == exp_array(i,5))
                    
                    OPEN(j,4) = xNode;
                    OPEN(j,5) = yNode;
                    OPEN(j,6) = exp_array(i,3);
                    OPEN(j,7) = exp_array(i,4);
                end
                flag = 1;
            end
        end
        %判断点n与某一个扩展点的f值，如果这个点的值没有更小，那么只是将这个点放入OPEN list中，但是这一步的起始点依然是原来的点n
        if flag == 0
            OPEN_COUNT = OPEN_COUNT + 1;
            OPEN(OPEN_COUNT, :) = insert_open(exp_array(i,1), exp_array(i,2), xNode, yNode, exp_array(i,3), exp_array(i,4), exp_array(i,5));
        end
    end
    
        index_min_node = min_fn(OPEN, OPEN_COUNT, xTarget, yTarget);
    if (index_min_node ~= -1)
        xNode = OPEN(index_min_node, 2);
        yNode = OPEN(index_min_node, 3);
        path_cost = OPEN(index_min_node, 6);
        
        CLOSED_COUNT = CLOSED_COUNT + 1;
        CLOSED(CLOSED_COUNT, 1) = xNode;
        CLOSED(CLOSED_COUNT, 2) = yNode;
        OPEN(index_min_node, 1) = 0;
    else
        NoPath = 0;
    end
end
%while跑完之后会得到一个OPEN，里面的点都有8个数据
%CLOSED保存的是走过的路径？？？？？
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
   %找出最后一个点
i = size(CLOSED, 1);
Optimal_path = [];
xval = CLOSED(i,1);
yval = CLOSED(i,2);
i = 1; %反向，最后的点相当于是第一个点
Optimal_path(i,1) = xval;
Optimal_path(i,2) = yval;
i = i + 1;

if ((xval == xTarget) && (yval == yTarget)) %保证在终点，防止dead end?
    inode = 0;
    parent_x = OPEN(node_index(OPEN, xval, yval), 4);
    parent_y = OPEN(node_index(OPEN, xval, yval), 5);
    %循环得到Optimal path           
    while (parent_x ~= xStart || parent_y ~= yStart)
        Optimal_path(i,1) = parent_x;
        Optimal_path(i,2) = parent_y;
        
        inode = node_index(OPEN, parent_x, parent_y);
        parent_x = OPEN(inode,4);
        parent_y = OPEN(inode,5);
        i = i + 1;
    end
    path = Optimal_path;
else 
    path = [1 1]; % 没有路线
end

end
